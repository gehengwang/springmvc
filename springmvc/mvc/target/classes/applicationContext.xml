<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:aop="http://www.springframework.org/schema/aop"  
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:p="http://www.springframework.org/schema/p" 
       xsi:schemaLocation="  
    	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
    	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  
   		   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  
    	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
<!-- XML schema 命名空间作用
	1、避免命名冲突,像java中的package一样	2、将不同作用的标签分门别类：tx命名空间针对事务类的标签;context针对组件的标签
	1、xmlns=".../beans" 声明xml文件默认的命名空间，表示未使用其他命名空间的所有标签的默认命名空间。
	2、xmlns:xsi="" 声明XML Schema 实例，声明后就可以使用 schemaLocation 属性了 
	3、xmlns:aop=""声明前缀为aop的命名空间，后面的URL用于标示命名空间的地址。当命名空间被定义在元素的开始标签中时，所有带有相同前缀的子元素都会与同一个命名空间相关联。
	4、xsi:schemaLocation=""指定Schema的位置这个属性必须结合命名空间使用。这个属性有两个值，第一个值表示需要使用的命名空间namespace的URL。第二个值表示供命名空间使用的 XML schema,即xsd的url  
 所以我们需要什么样的标签的时候，就引入什么样的命名空间和Schema 定义就可以了-->
 	
	   <context:component-scan base-package="org.ghw.aop"></context:component-scan>
<!--     <context:component-scan base-package="education.quartz"></context:component-scan> -->
    <!-- 自动扫描类包 ,将标注Spring注解的类自动转化为Bean，同时完成Bean的注入 多包扫描配置-->  
<!--     <context:component-scan base-package="sys,education">
    	<context:include-filter type="regex" expression="controller"/>
    	<context:include-filter type="regex" expression="service"/>
    	<context:include-filter type="regex" expression="dao"/>
    </context:component-scan> -->
    
    <!-- 引入jdbc配置文件 --><!-- 多个文件配置加载 <value>classpath:properties/*.properties</value>   -->
   <!--  <context:property-placeholder location="classpath*:jdbc.properties" ignore-unresolvable="true"/>   -->
    <!-- 配置数据源-->  
<!--     <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        基本属性 url、user、password  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
  
        配置初始化大小、最小、最大  
        <property name="initialSize" value="1" />  
        <property name="minIdle" value="1" />  
        <property name="maxActive" value="20" />  
  
        配置获取连接等待超时的时间  
        <property name="maxWait" value="60000" />  
  
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
  
        配置一个连接在池中最小生存的时间，单位是毫秒  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
  
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
  
        打开PSCache，并且指定每个连接上PSCache的大小  
        <property name="poolPreparedStatements" value="false" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
  
        配置监控统计拦截的filters  
        <property name="filters" value="stat" />  
    </bean> -->
    
    <!-- 配置jdbcTemplate模板 :属性注入-->
  <!-- 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource" />
  	</bean>
  	
  	配置一个NamedParameterJdbcTemplate模板 使用构造函数注入器  可以使用DataSource或JdbcTemplate 对象作为构造器参数初始化 
  	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
    	<constructor-arg ref="dataSource"/> 
  	</bean>

    
    对dataSource 数据源进行事务管理  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource" />  
    启用对事务注解的支持  
    <tx:annotation-driven transaction-manager="transactionManager" />
    
     -->
    <!-- 配置使Spring采用CGLIB代理 -->  
    <aop:aspectj-autoproxy proxy-target-class="true" />  
</beans>